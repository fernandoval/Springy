<?php
/**
 * Classe model for users table.
 *
 * This is a sample class for users table. You can delete it from your project and write your own.
 */
use Springy\Model;
use Springy\Security\AclUserInterface;
use Springy\Security\IdentityInterface;

class User extends Model implements IdentityInterface, AclUserInterface
{
    protected $tableName = 'users';
    protected $writableColumns = ['id', 'email', 'password', 'name', 'uuid', 'user_ip'];
    protected $insertDateColumn = 'created_at';
    protected $deletedColumn = 'deleted';
    protected $hookedColumns = ['password' => 'cypherPass'];

    protected $permissions = [];

    /**
     * Hook to password column.
     *
     * When a value is setted to this column, you value is changed to a hash using BCrypt hasher.
     */
    protected function cypherPass($pass)
    {
        return (new \Springy\Security\BCryptHasher())->make($pass);
    }

    /**
     * Load data from session.
     */
    public function fillFromSession(array $data)
    {
        $this->rows = [$data];
        $this->dbNumRows = 1;
        $this->clearChangedColumns();
        $this->loaded = true;
        $this->loadPermissions();
    }

    /**
     * Get the user credentials.
     */
    public function getCredentials()
    {
        return [
            'login'    => 'email',
            'password' => 'password',
        ];
    }

    /**
     * Get the user ID to login by cookie.
     */
    public function getId()
    {
        return $this->get('uuid');
    }

    /**
     * Get the name of column used to identify the user on cookie.
     */
    public function getIdField()
    {
        // You can use the column ID, but it is not recommended by sercurity issue.
        // Then you can use a calculated column with a UUID generated by Springy\Utils\UUID::random();
        // return $this->primaryKey;
        return 'uuid';
    }

    /**
     * Get the session data.
     */
    public function getSessionData()
    {
        return $this->get();
    }

    /**
     * Get the session name.
     */
    public function getSessionKey()
    {
        return '__YourProject__';
    }

    /**
     * Load the class by credencial.
     */
    public function loadByCredentials(array $data)
    {
        $this->load($data);

        if ($this->loaded) {
            $this->loadPermissions();
        }
    }

    /**
     * Load the array with user permissions.
     */
    private function loadPermissions()
    {
        if (!$this->loaded) {
            return false;
        }

        $permissions = [
            '^restfull\|endpoint\|([0-9])*$',
            '^restfull\|another-endpoint\|([0-9]*|theAction)?$',
            '^\|the\-page\|$',
        ];

        $this->permissions = $permissions;
    }

    /**
     * Get the permission for the access.
     */
    public function getPermissionFor($aclObjectName)
    {
        foreach ($this->permissions as $permission) {
            if (preg_match('/' . $permission . '/', Springy\URI::requestMethod() . '|' . $aclObjectName)) {
                return true;
            }
        }

        return false;
    }

    /**
     * The valitation rules to save into table.
     */
    protected function validationRules()
    {
        return [
            'name'     => 'required',
            'email'    => 'required|email',
            'password' => 'required',
            'user_ip'  => 'Required|IP',
        ];
    }

    /**
     * Validation error messages.
     */
    protected function validationErrorMessages()
    {
        return [
            'name' => [
                'required' => 'The name is required!',
            ],
            'email' => [
                'required' => 'The email is required!',
                'email'    => 'The email is not valid!',
            ],
            'password' => [
                'required' => 'The password is required!',
            ],
            'user_ip' => [
                'Required' => 'The IP is required!',
                'IP'       => 'This is not a valid IP.',
            ],
        ];
    }

    /**
     * Trigger for validate register before insert it.
     *
     * You can verify if the email already exists in database.
     */
    protected function triggerBeforeInsert()
    {
        $user = new self(['email' => $this->email, $this->deletedColumn => ['gte' => 0]]);
        if (!$user->isLoaded()) {
            return true;
        }
        unset($user);

        $validation = Springy\Validation\Validator::make(
            ['dk' => null],
            ['dk' => 'Required'],
            ['dk' => ['Required' => 'E-mail allread exists!']]
        );
        $result = $validation->validate();
        $this->validationErrors = $validation->errors();

        debug($validation->errors()->all());

        return $result;
    }

    /**
     * Trigger for validate register before update it.
     *
     * You can verify if the email already exists in database when user try to change it.
     */
    protected function triggerBeforeUpdate()
    {
        if (!in_array('email', $this->changedColumns())) {
            return true;
        }
        $user = new self(['email' => $this->email, $this->deletedColumn => ['gte' => 0]]);
        if (!$user->isLoaded() || $user->id == $this->id) {
            return true;
        }
        unset($user);

        $validation = Springy\Validation\Validator::make(
            ['dk' => null],
            ['dk' => 'Required'],
            ['dk' => ['Required' => 'Another user has this email.']]
        );
        $result = $validation->validate();
        $this->validationErrors = $validation->errors();

        return $result;
    }
}
